import os
import os.path as ospath
import utils as utl
from Bio.Seq import Seq
from Bio import SeqIO
import sys
import argparse

parser = argparse.ArgumentParser()
parser.add_argument("-n", "--name", required=False,nargs=2)
parser.add_argument("-g", "--gene", required=False)
parser.add_argument("-id", "--id", required=False)
parser.add_argument("-min", "--minimum", required=False)
parser.add_argument("-max", "--maximum", required=False)
parser.add_argument("-niter","--number_of_iterations", required=True, type=int)


if __name__=="__main__":
    args = parser.parse_args()
    
    if (args.name == None or args.gene== None) and args.name == None:
        raise ValueError("usage: command_line.py [-h] [-n NAME] [-g GENE] [-id ID] [-min MINIMUM] [-max MAXIMUM] -niter NUMBER_OF_ITERATIONS\n To generate the fake fastq file, a reference sequence from GenBank is needed. either provide:\n - the name of the species AND the gene\n - the ID of the sequence")
    
    else:
        if args.id != None:
            tag = id
        else:
            tag = args.name[0] +"_" +args.name[1] +"_"+args.gene 
        utl.download_sequence(args.name[0] +" "+args.name[1], args.gene,f"outputs/refseq_{tag}", args.minimum, args.maximum, id = args.id, permissive_search=True)
        with open(f"outputs/refseq_{tag}") as reader:
            for record in SeqIO.parse(reader, "fasta"):
                ref_seq = record.seq
        ref_seq = ref_seq.replace("U","T") #avoid Bio's ValueError: mixed RNA/DNA found


    with open(ospath.join(os.getcwd(), "outputs",f"fake_fastq_{tag}.fastq"), "w") as handle: # Operations on newly created or updated file
        for i in range(args.number_of_iterations) :
            handle.write(f"@read{i}\n") #writes the sequence id
            seq = utl.generate_weighted_sequence_variant(ref_seq,[0.05,0.25,0.5,0.25])
            broken_seq = utl.break_sequence_with_probability(seq,utl.break_prob_function)
            quality_score = utl.assign_quality_scores(broken_seq,0.5,10,2,50,5)
            handle.write(str(broken_seq)+ '\n') #writes the sequence generated by transforming it into string
            handle.write("+\n") #writes the + separator
            handle.write(quality_score + '\n') #writes the quality score